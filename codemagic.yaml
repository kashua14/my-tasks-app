workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 120
    environment:
      vars:
        GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: Encrypted(Z0FBQUFBQmd6cTNhd3BmcUV4VnhEN1dvdW1TU2MzY0I4aG82eVVKNG81N2hacGtUM0Q1WlZlUkFUdGxLUi1MZUhla0E0MVF1NjhJbmhpd1lyUGIyS05nZG5KaHh1RzBaWXdYdmc5WnQ3eHRUNHF3X2s4dnJUR3JneHl5Ql9nLTQ1cWF5THZGdlRoXzg4MGR2ai1jYmxlOFRoc1ZLZ3JrYlB1ZmdtbWhucTYtOEhDSWJrdDlQRUdlSVowa0FNVkxBUnhFbDh3QlVfTVZhWnV3aW5FYUVRMnJmT2tPU3FuRjNIdDFyZl8xWFV3dmt5MXdzb0xIWDFsSkJtMjI0cEw2VEdvNkVXWldIcmw2Y1hrdXV3V1dwYkYtRERSTElKT01qUGFzSDVFRjJwU05ibThfZExSOE5DemcxV0I4Q2xueWFuX3laUjJ2TTRhcFIwNS02LUJJRW1pc3BiYkhvanI2TEhlbnJQRXc2TVpBNmVXX3Fvak1GMTA4eGxIRHdMLXMydE1zS3pTbUF0bDBtLTFBa3E2b1ZnN3BfMzQzczg5ODgxajF3N284RVVLYUpVNVI2eGprSzJUSUFOdlFscGxIVnRzcGprYTNGV25uZGZEQko5T01CVTItSklGVjVmd3RaRGNkR3plcTMyVkRDX25rR1NvWG1xUzcxd1o5bnBPa0tKcDBWVGdTYkt1TklFUUxrd2VJMUNDeWxPb0d1TEtNcDlLN2hfYVlDWGZkLXVLNk81eUw1dEVhMXJOZlVsSTQxTm50emctOXNGTi0xU3pnVHhoaXRUYUJFODBzN0dFTko0TVlqQjFsaTNKYV94MVNaRzE1QURmd0VaWTFFMkMzS0pNM2RVdjdCZEstbUY4bVRyQk9LYi1JT0lsbVVmQ3hnclU4YTdxUy16Tm9oS3hEZlExUU9KTWk4SGFmaUxxbWFxeTVxYnZPbXV2Njk3ZTdMd1NDUDNtNDZtQXd1ZFh0UWhCZllRQ19FWk56SnRYT0lHMm9qNmtGWnBxejVkNHQyb0pUSkZpa28zc0dXZXhGejVRWXVJdTdOaFRfZDBKZXh5RG1xNkM2S0hROHIyWEdSRDJOQzZoU1hUeHV4by1pdGtWTTVVMlMzOUtmYjl1R29yS0RlU05rSXcxbkxyZFRLOFlhLWY0V1BIMEphVmNjZ3FnNDNZWEptWEpaNFdXNlRPUVNQdmJMdTgzUWYxblVwUmNQd29RLWN2cWRqVWZ4bzVOR08zS1RieE1sZm9YN0pvLXNPQVNZbWZUQ1h1UXpVbnZWWDVVQ2NpaUJkQXN6b05LZjA5ajM4RWlDbTBHZk5FbFhiMDVsLXc0QU9zeGxac19jOUIzaUJ0WjBsREhTUkxZVGpKai1obUNtU2xONERXTkdWRWgzTHdVTGk1cWpxUEJJY1lxLTBWajlHSnV0eXkxdGJWeW9DdTlITF9nSkhBc2pLbHF5Z00yUDhYY2s0cGVESVRtaVdXTjk4TktBN3oyZTlLR2QyNGFrT3ZQVUM3YTJ5aWZmR2l4aFdTSHdrMHFRQ0FCZlZzVnBZLW8zQVBUY1NuR04zNThBX2szaWxEanluM0wwQjQ4TWFVQXIzM0VCWG5IQmVQVTgyMUMydVJVNHY4MjIxZjh4NDJyMXUzZWx6VW5qYUZuOGNPMzVsQzFKSmlNZm1TYnRxWHZMVmM2ZFlmdWhLVjVjUHhaRXdJVm5wajZoaDM4VkZUeVFsNmxQLUFNbVUxbXdWVXJmbjMtNjVXRk9venZjdWRRV1JrY1BKWEpZTzB5a2lLWXBJZmlSWDhvbXlBODNYSXZXcUNsRTlGRV9uck5fTmV6RUVJdnNsTjRwYXhBQXVwS1NkYURXSy1Pb2EyWmYzREQ5UGU0LTBfcXNHQlBleEhpQUVJakJlVE5iZ2pfSjJ2Z3F6bGlaZkJ5cHNvcFlicnhudEFOTlBCM0NUMVAyemU5NDBMS1Qyako0V2MxeUExOEloOUVYWjBtZ05ZcU9sS01QNWYwNGl2WWZTdHJaYldBbzcxZVJ3X2VqWXBCYWhaSzMzZGRiX2lXbURheUFVa1MwX05mXzl3M2JBLTktcGJHbE93QVp6NThwa1RCMWpJaGF6ZXpkRWZSYm1SaGNDQllvalJJWjhPMk1ia3Yta2ZXcHVGOTU1TDZmVDFoV1pNaXF5R1dGQk5xRDhNaWY1cmlKWmtuZnV1UEZ1NjVsUWMyWmU5UFZFZ24tT3ZhWmZ1dUNxT2prUHhuelRKeDd5a1Jxa0RuaF8zNXVWV3RDTHRuVFB1TlNUd3RrTXdhRVNCUUFibkNBU2RIelhxYkJuYlJ3TGxxUHpIdmxoVzd2R1JycXhzck5tdVhUb1Q4TEJrLXZWNFRIeVhOeVFkVVZPd3pwVzlFUE01VDZBeFBWMHl6LXc0NGQzejM2bUdHU2o5dWRiOEo4SldfZ1NGN1cwSHNHSU12eENWUC14dTR5Vm1mY1hEXzlNeGUwYkZBMVBQZnVrQ3h1MVhDUFVSS0d4aGhPNFI5ZklsZ3h0OFFPSmRMeWVnWE1JdmNoRFYwZDZBeERvYWdwT1NzUXpONkxweXRWX200SEI2aEgzS1Z4Tm9Ga2dfeUhWLWtGUVNjZHlMMkRGLW9rSVZXZEUzQXVfdW9WdWNiTDRaWVRESGZlVnRCNDNLWS1oRUJSOFV2aFVBb3NGdjd1RWRrWmcybWpPVlc1dmp4SlBSTDhWbm12R0RsMV9SZ19KUDZLRWlWd0NMZTZSZFdhV2t5X0dXQ2ZRUjFmd2Y5elZTRmhLYUY3YXpHaVZkdG93WFpaam1Ya0pNRmZsNnFBV01ZU09Ya0dWcG01SzBGY01nVUtnTUt4Zm4xU0Q3Y2JqRF8tNmJuMWM1Vkx2ell0RVhjWjNuM2c5YkcyUUxrMW1uZC1OLVh0bUVGUHZvZ2xzZUx6Tk0xOGxGUDlTbWtja3ZPTGZUTTZhdjZYdWo4bEFwUVV2QUozOG1zSDJfRjY2LVlPWGtwRk42aVM4ZkNhR2RRYldEdUNUNW1NSTBBZmhOcDBCendRREdXZEZqWWpOV0NlakJxVndKTkxFQ1NBSFRfUERYaXNzbVZhUmFqZzV2MzZPUWV3MzZUNUMtdTg5cE9mdHd0LXo1R1pMT2FCM0xNSzhYeXB5VjZ1UkoyMUpnOTNZTTd1RHhvaTZHTDVrZUl5UHJvd29aRHhTQV9HaW0taUYzZURRTFZ4R2RHWVdrdk9WMnpNUEpVblFRMzdQSF9qS1JMWlNaQlkwTTJWNGE5M0FFZkJUVVdlaTdCRFFLelNZUklxSW9NeVV3Y2h5N2c5Q0VkeHJhczN2ZlE2NHF3c1BnYXdEXzdDSDJ2cXR2S0lEcUczU0d6cHJMWEo3N3MxdGpRb0FWLUFULWdteXpWN0JkcGU1QWwtZk9NdmJ0cWVFVUhVVEE2b2RhQkZsVXY1WXVVVlppRXRTS1RWUndzdi0xSjBWT3hYWUdpakFzcDVycFFDeDNLcTVib3gzSXNXTW85c1FkdmdjdTFlbkdicHhQQ01GTmtnYkxXLXJtV2xRSHhobDVXWF9rSkZkR0VOc2ZhelVNc0FtdXV2cWdGWnZjdHhGX3Q4V2I1alFyQWtCYzJxdkJSRnkwbG9sQk9YR1dDSmo2aTZicGtrazNnaUpxS1g5Qmt4d1lWUzVZLVBualRqTnR2bEd3bmFfb2UxRVdxMHFDN2VKUjRvX25ENlZZMHphTW1qOFZnYm1EMXM3bmZFcllobHhTRDJvc1M1TWJqblJoRUp5QXBCcndacmp0bl9INjZCeVJnNVdHa1JQeUR1cUhKMkQ2MUR6ZVVRTHBGaDUzTnZneGk4Qnc0azN1TkdRTV9uaEY5NnhaNUx3c3VuYWJ4bXVrQTBTMk9fYkNFYmNLbjRWenlpN0ZwR0ZmOUtZQ0dhZDMxcWRCY0RQd2VELTdncXhVc05pQmdzTG9wTjBPazFZNEtlQ21CQVdKWWJlZ0VhX0dMeFpibmJQQXdKOWFJNTZVX0EyNTcyTngtY3IzY2RIZ3llMkJsN1BhVmxNXzRKWmI3Vk80d2pYdnotR1dMVmRWdXRBeVg5YzljZk1GRjFCVFg1bDQ3bG5xWFc0amNfcTJuSGZUQW1BYkZlNW9PT1VFMGNHLS1BaFctWm5uaHVGOUF3WEs5M0EwSHZUNzJMa3c4cDdzZkdjMUlrMERyUXFSV0RPcVVKTjA2aUFZR3dYYk02eENmNFR1aGluLU44QlRQVmdxZk9sVGJnaTRYXzRCQ1lVSzdDYzBDdGtSeURVVVB6VG9oNmdWbE91Yk5Ha1JpQXRIVkxLdjQzeko0ZnUxU3U4a255Zk1tTUVWR2ptSFVfdFZDcWVIU3BCejZiemxXYkUwSzlPemxsaHZidzk4T2hVVkQ2OHRfUjUxUzFjMU5FQmU1X3BmbTFWY0dpYkV0MEhyUDhFSFk2RVhtNUxsOEJfTlJ2eDVnbjNrVXFYaURXcTY1U3JfWEdvTUNsT1RXbzZsYjZzVmFCX3VqemQ3Q3lXeGkxRVBtOTI1THE1Mkhnc0VBMUtZWUljQ214NFloVEhORUtXdHRJZFFTLTBjYmVEZy12WXp3cVZQd1MxRTV5elNfNnozb0x3ZjJVRjYzMldmTERERGxhQlV3bW5OelN2c2k1NVpOVlhONS1jek1HOHV4T0R4VXlWSFNnalE0X0MzbmlfYnFJQnF2TmZ3UXFqVjVlbERIeGczaDFGY21xLUZiMFRkTjMzdWJYM1BOQXVGT2VNR1VNQ3AybGJlR3BudGw4dE82SE9uVmZzbG1oS0ZYeXkxUWE2cURBMFJGdHZiMHgwRS1rZXZIQW5HcDdQN1hITDhabk5uVFZla2JtTkxyOFhtbFBzMEkyUzU1RlotaGRmeTluTTRfcDIyM1JoWFZHSGJCU25VeWJJUjV4ZXlBZ09xb3I1S0JramE3cmkxNTBUeXJlSHFCY2lBUDdlSW8za0s0X2hGVVVFaE9SQUp2RlhaMjUzNDRmNE9vSnA0TjhGZ2w3cHNGSWs5TUVTbUIyVEhuVE5zRkNrSmZzZndNRDQ2VHlqTS1veTVmYy1HVE1YOVYwSm9BNlcyQlRhSkFHdXBfUVFCeWNXdm5nWUctallhOXFpWElmbmREUDU4UWpNT1FEc3FBNV9icWdsX0g2MFM4dG16bTk0QjJRY1U3UklrVi1QZ0JTR25acHIydzE1WmpLNFhNZ1gwb3hESlVscXBpQnd4SlFWaWVDUk1wTVBqeTlVb0o2Qld2MHdzbGFuVUluR1g4SFk1cDJYN1pMaTV6SlJITVoxRS1qQzBVRmdUSFFOY2swWVdhQ09ZWHZIQ2FwcHB2WTVPUF81YVZsYURwM2w3OVg3cEJhX2FWdFprYV9QSThxUkUwS3V1anNBaHJwN0JINTFQQlVCRGtVUVNZR3doNFhrWHZYVzhIdDBZd0M1UkV1ckJ3a21aSjc3NGtuYjJSQUZNVFhqVFRoWmg2dmxSR19jMjFGTzBMSEZYUW1DU1BzVHhkSlRqWFVwdHk0VVEyTGxqcUZRRk1ydl8xMzg3ei1rSFhpbnp3ajc2YUtJUVB6cDJnPT0=) # <-- Put your encrypted Google Play service account credentials here.
        FCI_KEYSTORE_PATH: /tmp/keystore.keystore
        FCI_KEYSTORE: Encrypted(Z0FBQUFBQmd6cVhLbVJpNTRTM0JYOHdrRFJWZE1EN0hnUExJYlFqcTNyZi1EV3d4MlQ1QVl4TU9WY1ctUWFIMld2VXJDTHR0YUEwdnNzQ3hJSElnV2stXy1RWmktYlNmVFE9PQ==) # <-- Put your encrypted keystore here
        FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmd6cVpla0NMVTRkU1c5Ri13R0E2eGFiWC1kZTQ3bGtBRFp2a0tBVzlnMVM0alNSX2hrMHZpWmxsUWp2QlhybEVwMzk2Tmc1OFlWYzZXbXA2XzhiR2ZmMklPWHc9PQ==) # <-- Put your encrypted keystore password here
        FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmd6cVpla0NMVTRkU1c5Ri13R0E2eGFiWC1kZTQ3bGtBRFp2a0tBVzlnMVM0alNSX2hrMHZpWmxsUWp2QlhybEVwMzk2Tmc1OFlWYzZXbXA2XzhiR2ZmMklPWHc9PQ==) # <-- Put your encrypted key alias password here
        FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmd6cVhLbVJpNTRTM0JYOHdrRFJWZE1EN0hnUExJYlFqcTNyZi1EV3d4MlQ1QVl4TU9WY1ctUWFIMld2VXJDTHR0YUEwdnNzQ3hJSElnV2stXy1RWmktYlNmVFE9PQ==) # <-- Put your encrypted key alias here
        PACKAGE_NAME: "com.yourcompany.mytasks" # <-- Put your package name here
        GOOGLE_PLAY_TRACK: "alpha" # <-- This must be "alpha" or above.  
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up key properties
        script: |
          echo $FCI_KEYSTORE | base64 --decode > /tmp/keystore.keystore
          cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$FCI_KEYSTORE_PASSWORD
          keyPassword=$FCI_KEY_PASSWORD
          keyAlias=$FCI_KEY_ALIAS
          storeFile=/tmp/keystore.keystore
          EOF
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          cd . && flutter packages pub get
      - name: Flutter analyze
        script: |
          cd . && flutter analyze
      - name: Flutter unit tests
        script: |
          cd . && flutter test
        ignore_failure: true          
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
      - name: Build APK with Flutter  
        script: |
          cd . && flutter build apk --release --build-name=1.0.0 --build-number=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks="$GOOGLE_PLAY_TRACK") + 1))
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true     # To not receive a notification when a build succeeds
          failure: false    # To not receive a notification when a build fails
      slack: 
        # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
        channel: '#builds'
        notify_on_build_start: true   # To receive a notification when a build starts
        notify:
          success: true               # To not receive a notification when a build succeeds
          failure: false              # To not receive a notification when a build fails
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: $GOOGLE_PLAY_TRACK
        in_app_update_priority: 0
  ios-workflow:
    name: iOS Workflow
    # instance_type: mac_mini
    max_build_duration: 120
    environment:
      vars:
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"                
        # https://docs.codemagic.io/code-signing-yaml/signing-ios/
        APP_STORE_CONNECT_ISSUER_ID: Encrypted(...) # <-- Put your encrypted App Store Connect Issuer Id here 
        APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(...) # <-- Put your encrypted App Store Connect Key Identifier here 
        APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(...) # <-- Put your encrypted App Store Connect Private Key here 
        CERTIFICATE_PRIVATE_KEY: Encrypted(...) # <-- Put your encrypted Certificate Private Key here 
        APPLE_ID: Encrypted(...) # <-- Put your encrypted Apple Id email address here
        APP_SPECIFIC_PASSWORD: Encrypted(...) # <-- Put your encrypted App Specific password here. See here for more information - https://support.apple.com/en-us/HT204397
        BUNDLE_ID: "com.yourcompany.mytasks" # <-- Put your bundle id here
        APP_STORE_ID: 1111111111 # <-- Use the TestFlight Apple id number (An automatically generated ID assigned to your app) found under General > App Information > Apple ID. 
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: |
          keychain initialize
      - name: Fetch signing files
        script: |
          app-store-connect fetch-signing-files $BUNDLE_ID --type IOS_APP_STORE --create
      - name: Use system default keychain
        script: |
          keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      - name: Get Flutter packages
        script: |
          cd . && flutter packages pub get
      - name: Flutter analyze
        script: |
          cd . && flutter analyze
      - name: Flutter unit tests
        script: |
          cd . && flutter test
        ignore_failure: true          
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;
      - name: Flutter build ipa and automatic versioning
        script: |
          flutter build ipa --release \
          --build-name=1.0.0 \
          --build-number=$(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_ID") + 1)) \
          --export-options-plist=/Users/builder/export_options.plist
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true     # To receive a notification when a build succeeds
          failure: false    # To not receive a notification when a build fails
      slack: 
        # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
        channel: "#builds"
        notify_on_build_start: true   # To receive a notification when a build starts
        notify:
          success: true               # To receive a notification when a build succeeds
          failure: false              # To not receive a notification when a build fails
      app_store_connect:   # https://docs.codemagic.io/publishing-yaml/distribution              
        apple_id: $APPLE_ID    
        password: $APP_SPECIFIC_PASSWORD